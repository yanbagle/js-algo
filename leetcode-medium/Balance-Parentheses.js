/*

https://leetcode.com/discuss/interview-question/124551/

*/

const balanceParen = (str) => {
  const removeIndices = {};
  const stack = [];

  for (let i = 0; i < str.length; i++) {
    const c = str[i];
    if (c === ")") {
      if (!stack.length) {
        removeIndices[i] = true;
      } else {
        stack.pop();
      }
    } else if (c === "(") {
      stack.push(i);
    }
  }

  for (let index of stack) {
    removeIndices[index] = true;
  }

  const res = "";
  for (let i = 0; i < str.length; i++) {
    if (!removeIndices[i]) {
      res += str[i];
    }
  }

  return res;
};

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

const balanceParen = (str) => {
  const stack = []; // stack containing the indices of open parens only
  const removeIndices = {}; // containing both the indices of open and closed parens

  for (let i = 0; i < str.length; i++) {
    if (str[i] === "(") {
      stack.push(i);
    } else if (str[i] === ")") {
      if (!stack.length) {
        // stack should be empty whenever we encounter a close paren, if not we save the index to be removed
        removeIndices[i] = true;
      } else {
        stack.pop();
      }
    }
  }

  // combine the stack and removeIndices
  for (let index of stack) {
    removeIndices[index] = true;
  }

  let res = "";
  for (let i = 0; i < str.length; i++) {
    if (!removeIndices[i]) {
      res += str[i];
    }
  }

  return res;
};

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

const balanceParen = (str) => {
  const stack = []; // value example = ['(' , 0] - 2nd value is the char index
  const removeIndices = {}; // for all the extra closed parens we encounter

  for (let i = 0; i < str.length; i++) {
    const c = str.charAt(i);
    if (c === "(") {
      // open paren, we push onto the stack
      stack.push(["(", i]);
    } else if (c === ")") {
      if (!stack.length) {
        // if stack is already empty, use removeIndices to store index to be removed
        removeIndices[i] = true;
      } else {
        stack.pop(); // closed paren, we pop it out of the stack
      }
    }
  }

  while (stack.length) {
    // consolidate the 2 data structures-
    const index = stack.pop()[1];
    removeIndices[index] = true;
  }

  let res = "";
  // loop through string and skip the index that's in our removeIndices set
  for (let i = 0; i < str.length; i++) {
    if (!removeIndices[i]) {
      // if character is not in the remove set
      res += str.charAt(i);
    }
  }

  return res;
};
