/*

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Input: nums = [1], k = 1
Output: [1]

*/

/*

create a freqTable from nums' count

transform the freqTable into an array with the index corresponding to its frequency
e.g. [1,1,2,2,2,3] => [ [] , [3] , [1], [2] ] 
3 appears 1 time so it's under index 1, 1 appears 2 times so it's in index 2, etc

Loop through that array backwards because we want the top k freq 
  fill in res with the numbers until res.length is equal to k 

return res

*/

const topKFrequent = (nums, k) => {
  const freqTable = {};
  const freqArr = [];

  // convert to freq table
  for (let num of nums) {
    freqTable[num] = freqTable[num] ? freqTable[num] + 1 : 1;
  }

  // convert to freq arr where index corresponds to freq count
  for (let num in freqTable) {
    const freqCount = freqTable[num];
    freqArr[freqCount]
      ? freqArr[freqCount].push(num)
      : (freqArr[freqCount] = [num]);
  }

  const res = [];
  for (let i = freqArr.length - 1; i >= 0; i--) {
    const elements = freqArr[i];
    if (elements) {
      for (let ele of elements) {
        if (res.length === k) {
          return res;
        }
        res.push(ele);
      }
    }
  }
  return res;
};

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

const topKFrequent = (nums, k) => {
  const freqCount = {};
  const freqArray = [];

  for (const n of nums) {
    freqCount[n] = freqCount[n] ? freqCount[n] + 1 : 1;
  }

  for (const num in freqCount) {
    const count = freqCount[num];
    freqArray[count] = freqArray[count] ? [...freqArray[count], num] : [num];
  }

  const res = [];
  for (let i = freqArray.length - 1; i >= 0; i--) {
    if (freqArray[i]) {
      // a count index might be empty if no number occurs i times in the array
      for (const num of freqArray[i]) {
        res.push(num);
        if (res.length === k) {
          return res;
        }
      }
    }
  }
};

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

const topKFrequent = (nums, k) => {
  if (!nums || !nums.length) {
    return [];
  }

  const freqTable = {};

  nums.forEach((num) => {
    freqTable[num] = freqTable[num] ? freqTable[num] + 1 : 1;
  });

  const freqArr = [];

  for (const num in freqTable) {
    freqArr[freqTable[num]] = freqArr[freqTable[num]]
      ? [...freqArr[freqTable[num]], num]
      : [num];
  }

  const topKFreq = [];
  while (k > 0) {
    const numbers = freqArr.pop();
    if (numbers && numbers.length) {
      for (let j = 0; j < numbers.length; j++) {
        topKFreq.push(Number(numbers[j]));
        k--;
      }
    }
  }
  return topKFreq;
};
