/*

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

*/

const longestCommonSubsequence = (text1, text2) =>  {
  const dp = [];
  
  // initialize everything to zero plus an extra row and column because the base case lies in the extra row/column
  for (let i = 0; i < text1.length + 1; i++) {
    dp[i] = [];
    for (let j = 0; j < text2.length + 1; j++) {
      dp[i][j] = 0;
    }
  }
  
  /*
  
  The main idea is when you’re solving this on paper, if i and j matches, 
  then we move diagonally because we want to increment both i AND j and see if 
  the next characters matches as well. 
  If they don’t match, then we move it down and right (incrementing either 
  i OR j) as we go along and try to find other matches subsequently.   
    
  */
  
  // looping backwards bottom up approach
  for (let i = text1.length - 1; i >= 0; i--) {
    for (let j = text2.length - 1; j >= 0; j--) {
      // if chars matches then we look diagonally plus 1 because we have found another char to add to subsequence count
      if (text1.charAt(i) === text2.charAt(j)) { 
        dp[i][j] = dp[i + 1][j + 1] + 1;
      } 
      // if they don't match then we look to its down and right neighbors
      else { 
        dp[i][j] = Math.max(dp[i + 1][j], dp[i][j + 1]);
      }
    }
  }
  
  return dp[0][0];
}
/*******************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************/

const longestCommonSubsequence = (text1, text2) =>  {
  const dp = [];
  for (let r = 0; r < text1.length + 1; r++) {
    dp[r] = [];
    for (let c = 0; c < text2.length + 1; c++) {
      dp[r][c] = 0;
    }
  }
  
  for (let i = text1.length - 1; i >= 0; i--) {
    for (let j = text2.length - 1; j >= 0; j--) {
      if (text1.charAt(i) === text2.charAt(j)) {
        dp[i][j] = 1 + dp[i+1][j+1] // plus 1 because the chars match
      } else {
        dp[i][j] = Math.max(dp[i+1][j], dp[i][j+1]); // max of its right or down neighbors 
      }
    }
  }
  
  return dp[0][0];
}