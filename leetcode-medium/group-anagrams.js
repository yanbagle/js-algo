/*

Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Input: strs = [""]
Output: [[""]]

Input: strs = ["a"]
Output: [["a"]]

*/

const groupAnagrams = (strs) => {
  const anagramTable = {};

  for (let word of strs) {
    const alphabetizedWord = word.split("").sort().join("");
    if (!anagramTable[alphabetizedWord]) {
      anagramTable[alphabetizedWord] = [];
    }
    anagramTable[alphabetizedWord].push(word);
  }

  const res = [];
  for (let word in anagramTable) {
    res.push(anagramTable[word]);
  }
  return res;
};

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

const groupAnagrams = (strs) => {
  const anagramSet = {};

  for (const word of strs) {
    const alphabetizedWord = word.split("").sort().join("");
    if (!anagramSet[alphabetizedWord]) {
      anagramSet[alphabetizedWord] = [];
    }
    anagramSet[alphabetizedWord].push(word);
  }

  const res = [];
  let i = 0;
  for (const w in anagramSet) {
    res[i] = anagramSet[w];
    i++;
  }

  return res;
};

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

const groupAnagrams = (strs) => {
  if (!strs || !strs.length) {
    return [];
  }

  const anagramSet = {};

  // use the alphabetizedWord as key for the anagram groups
  for (const word of strs) {
    // split turns word into an array, sort alphabetizes it, join turns it back to a string
    let alphabetizedWord = word.split("").sort().join(""); // turn word into abc order
    if (!anagramSet[alphabetizedWord]) {
      anagramSet[alphabetizedWord] = [];
    }
    anagramSet[alphabetizedWord].push(word); // add new word onto the anagram group
  }

  const results = [];
  let i = 0;
  for (const a in anagramSet) {
    // convert into array for return
    results[i] = anagramSet[a];
    i++;
  }

  return results;
};
