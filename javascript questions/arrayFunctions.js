class MyArray {
  constructor(arr) {
    this.myArray = arr;
  }

  find(func) {
    for (let ele of this.myArray) {
      if (func(ele)) {
        return ele;
      }
    }
  }

  reduce(func, startingValue = this.myArray[0]) {
    let accumulator = startingValue;
    const arrCopy = [...this.myArray];
    for (let i = 0; i < this.myArray.length; i++) {
      const curr = this.myArray[i];
      accumulator = func(accumulator, curr, i, arrCopy);
    }
    return accumulator;
  }

  filter(func) {
    const filtered = [];
    for (let ele of this.myArray) {
      if (func(ele)) {
        filtered.push(ele);
      }
    }
    return filtered;
  }

  forEach(func) {
    for (let i = 0; i < this.myArray.length; i++) {
      func(this.myArray[i], i);
    }
  }
}

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

class MyArray {
  constructor(arr) {
    this.myArray = arr;
  }

  find(func) {
    for (let ele of this.myArray) {
      if (func(ele)) {
        return ele;
      }
    }
  }

  reduce(func, startingValue = this.myArray[0]) {
    let accumulator = startingValue;
    let currentIndex = 0;
    const arrCopy = [...this.myArray];
    for (let ele of this.myArray) {
      accumulator = func(accumulator, ele, currentIndex, arrCopy);
      currentIndex++;
    }
    return accumulator;
  }

  filter(func) {
    const filteredArr = [];
    for (let ele of this.myArray) {
      if (func(ele)) {
        filteredArr.push(ele);
      }
    }
    return filteredArr;
  }

  forEach(func) {
    let currentIndex = 0;
    for (let ele of this.myArray) {
      func(ele, currentIndex);
      currentIndex++;
    }
  }
}

/*******************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************
 *****************************************************************************************************************************/

function MyArray(arr) {
  this.myArray = arr;
}

MyArray.prototype._find = function (func) {
  for (let ele of this.myArray) {
    if (func(ele)) {
      return ele;
    }
  }
};

MyArray.prototype._filter = function (func) {
  let filtered = [];
  for (let ele of this.myArray) {
    if (func(ele)) {
      filtered.push(ele);
    }
  }
  return filtered;
};

MyArray.prototype._forEach = function (func) {
  for (let i = 0; i < this.myArray.length; i++) {
    func(this.myArray[i], i);
  }
};

MyArray.prototype._reduce = function (func, startingValue = this.myArray[0]) {
  let accumulator = startingValue;
  let currentIndex = 0;
  let array = this.myArray;
  for (let ele of this.myArray) {
    accumulator = func(accumulator, ele, currentIndex, array);
    currentIndex++;
  }
  return accumulator;
};

const newArr = new MyArray([1, 2, 3, 4, 5]);
const found = newArr._find((ele) => {
  return ele === 5;
});
// console.log(found);

newArr._forEach((ele, index) => {
  // console.log(index + ' ' + ele);
});

let avg = newArr._reduce((accum, curr, index, array) => {
  accum += curr;
  if (index === array.length - 1) {
    return accum / array.length;
  }
  return accum;
}, 0);

console.log(avg);
