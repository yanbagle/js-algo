/*

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Input: root = [3,9,20,null,null,15,7]
Output: 3

*/

/*
  q = [root]
  while q is NOT empty
    for nodes in q //important that original length of q is preserved and used here
      n = q.shift() // removes first element
      add left and right child of n into q
    level++
    
  return level
*/

const maxDepth = (root) => {
  if (!root) {
    return 0;
  }
  
  const q = [root];
  let level = 0;
  while (q.length) {
    const qLen = q.length; // perserve the original length 
    for (let i = 0; i < qLen; i++) { // everytime we do a loop, it's at a new level
      const node = q.shift(); // js version of pop, removes first element
      if (node.left) {
        q.push(node.left);
      } 
      if (node.right) {
        q.push(node.right);
      }
    }
    level++;
  }
  return level;
}
/*******************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************
*****************************************************************************************************************************/

const maxDepth = (root) => {
  if (!root) {
    return 0;
  }
  
  const queue = [root];
  let level = 0;
  
  while (queue.length) {
    const originalLen = queue.length;
    for (let i = 0; i < originalLen; i++) {
      const node = queue.shift();
      if (node.left) {
          queue.push(node.left);
      }
      if (node.right) {
          queue.push(node.right);
      }
    }
    level++;
  }
  
  return level;
  
}